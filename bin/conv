#!/bin/bash

a0="$(realpath "$0" 2>/dev/null || readlink -f "$0" 2>/dev/null || echo "$0")"

case "$a0" in
	(/*) scriptdir="$(dirname "$a0")/..";;
	(*)  scriptdir="$(pwd)/$(dirname "$a0")/..";;
esac

while [ $# -gt 0 ]; do
	case "$1" in
	('-l'|'--list')
		(	cd "$scriptdir/mods/conv" &&
			ls -d1 */*.mod.sh |sed -e 's,\.mod\.sh$,,g' | sort
		)
		exit 0
	;;
	('-n'|'--dry-run') CONV_WRITE=false;;
	('-w'|'--write') CONV_WRITE=true;; # use for json_dfv/fs
	('--') shift; break ;;
	('-*') echo >&2 "ERROR: invalid option"; exit 1 ;;
	(*) break
	esac
	shift
done

if [ $# -eq 0 ]; then
	echo >&2 "Usage: conv [<options>] <fmt1>/<fmt2>[/<fmt3>[/...]] [args...]"
	exit 1
fi

_conv_alias() {
	case "$1" in
	(flatfiles) echo "fs";;
	(R) echo "rgrepn";;
	esac
}

_conv() {
	while [ $# -gt 0 ]; do
		case "$1" in
		(flatfiles/*) local z="${1#*/}";shift;set -- "fs/$z" "$@";;
		(*/flatfiles) local a="${1%/*}";shift;set -- "$a/fs" "$@";;
		esac
		local solution="$(case "$1" in
		(rgrepn/json_dfv)	echo "rgrepn/json_dfnl/json_dfv";;
		(json_dfv/rgrepn)	echo "json_dfv/json_dfnl/rgrepn";;
		#(fs/rgrepn);;
		(rgrepn/fs)		echo "rgrepn/json_dfnl/json_dfv/fs";;
		(rgrep/json_dfv)	echo "rgrep/rgrepn/json_dfv";;
		(json_object/csv)	echo "json_object/json_array/csv";;
		(json_object/tvs)	echo "json_object/json_array/tsv";;
		#(json_object/rgrep)	echo "json_object/rgrepn/rgrep";;
		#./mods/conv/rgrep/json_struct_dfv.mod.sh.via <- indexed_dfv

		(rgrepn/tsv) echo "rgrepn/json_dfv/json_dirobj json_object/json_array/tsv";;
		(tsv/rgrepn) echo "tsv/json_array/json_object json_dirobj/json_dfv/rgrepn" ;;

		(json_dirobj/tsv) echo "json_object/json_array/tsv";;
		(tsv/json_dirobj) echo "tsv/json_array/json_object";;
		esac)"
		if [ -n "$solution" ]; then
			shift;set -- $solution "$@"
		fi

		case "$1" in
		(*/*/*)
			local a="${1%%/*}"		# aa(xx)/bb(yy)/cc(zz) -> aa(xx)
			local bc_="${1#*/}"		# aa(xx)/bb(yy)/cc(zz) -> bb(yy)/cc(zz)
			local b="${bc_%%/*}"		# bb(yy)/cc(zz)        -> bb(yy)
			shift;
			set -- "${a}/${b}" "${bc_}" "$@" # aa(xx)/bb(yy)/cc(zz) --> aa(xx)/bb(yy) bb(yy)/cc(zz)
			_conv "$@"
			return $?
		;;
		(*/*)
			local a="${1%%/*}"		# aa(xx)/bb(yy) -> aa(xx)
			a="${a%%(*}"			# aa(xx)        -> aa
			local b="${1#*/}"		# aa(xx)/bb(yy) -> bb(yy)
			shift
			local bargs=''
			case "$b" in
			(*'('*')')			# bb(yy)
				bargs="${b#*(}"		# bb(yy) -> yy)
				bargs='('"${bargs}"	# yy)    -> (yy)
				b="${b%%(*}"		# bb(yy) -> bb
			;;
			esac
			if [ $# -eq 0 ]; then
				(
					RequireMod "conv/${a}/${b}"
					local name="${a}_to_${b}"
					"$name" "$bargs"
				)
			else
				(
					RequireMod "conv/${a}/${b}"
					local name="${a}_to_${b}"
					"$name" "$bargs"
				) | (
					_conv "$@"
				)
			fi
			return $?
		;;
		esac
		shift
	done
}

RequireMod() {
	if [ -z "$scriptdir" ]; then
		echo >&2 "ERROR: scriptdir variable not defined"
		return 1
	fi
	if [ -z "$1" ]; then
		echo >&2 "ERROR: Require: missing argument"
		return 1
	fi
	. "${scriptdir}/mods/$1.mod.sh"
}

Deps() {
	local self="Deps"
	while [ $# -gt 0 ]; do
		if ! command >/dev/null 2>&1 -v "$1"; then
			echo >&2 "ERROR: ${self}: missing dependency (command $1)"
			return 1
		fi
		shift
	done
	return 0
}

_conv "$@"
